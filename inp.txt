#include <bits/stdc++.h>
using namespace std;


#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define ordered_set tree<int, null_type ,less_equal<int>, rb_tree_tag,tree_order_statistics_node_update>
/*    cout<<*(oset.find_by_order(2))<<endl;
    cout<<oset.order_of_key(6)<<endl; */
#define endl "\n"
#define int long long
#define SIGMA ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);

#define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }
void err(istream_iterator<string> it) {}
template<typename T, typename... Args>
void err(istream_iterator<string> it, T a, Args... args) {
    cerr << *it << " = " << a << endl;
    err(++it, args...);
}// use error(args..)


const int32_t mod=1e9+7;
const int32_t mod2=998244353;


int fast_exp(int base, int power){int ans=1;while(power){if(power&1)ans=(ans*base)%mod;base=(base*base)%mod;power=power>>1;}return ans%mod;}
int modInverse(int a,int p){return fast_exp(a,p-2)%p;}
bool is_prime(int n){if(n==1){return false;}int i=2;while(i*i<=n){if(n%i==0){return false;}i+=1;}return true;}
int gcd(int a,int b){if(a==0)return b;return gcd(b%a,a);}
int modFact(int n){if(n>=mod)return 0;int result=1;for(int i = 1; i <= n; i++)result=(result*i)%mod;return result;}

int nCrModPFermat(int n, int r, int p)
{
    // If n<r, then nCr should return 0
    if (n < r) return 0;
    if (r == 0) return 1;

    int32_t fac[n + 1];
    fac[0] = 1;
    for (int i = 1; i <= n; i++)
        fac[i] = (fac[i - 1] * i) % p;
 
    return (fac[n] * modInverse(fac[r], p) % p * modInverse(fac[n - r], p) % p) % p;
}
pair <int, int> moves[] = {{-1, 0}, {1, 0}, {0 ,-1}, {0, 1}, {1, 1}, {-1, 1}, {1, -1}, {-1, -1}};


/* yareyareyareyareyareyareyareyareyareyareyareyare */


void solve()
{

    int v,e;
    cin>>v>>e;
    
    vector <pair <int, int> > adj[v];

    // map used only to print paths
    map <int, int> path;

    for(int i=0; i<e; i++)
    {
        int src; int dest; int wt;
        cin>>src >> dest>>wt;

        adj[src].push_back({dest,wt});
        adj[dest].push_back({src,wt});
    }

    // dijkstraaaaa....

    priority_queue< pair<int,int>, vector<pair<int,int>>, greater<pair<int, int>> > pq;
    // above line implements a min heap

    vector <int> distance(v, INT_MAX);
    int src = 1;

    pq.push(make_pair(0,src));

    distance[src] = 0;

    while(!pq.empty())
    {
        pair <int, int> ptop = pq.top();
        pq.pop();

        int u = ptop.second;
        int wtSource = ptop.first;

        if(wtSource > distance[u])
        {
            // this thing optimises the code. else we will check same vertex many times
            continue;
        }

        for(auto pp : adj[u])
        {
            int v = pp.first;
            int wt = pp.second;

            if(distance[v] > distance[u] + wt)
            {
                distance[v] = distance[u] + wt;
                pq.push(make_pair(distance[v], v));
                path[v] = u;
            }
        }
    }


    for(int i = 0; i < v; i++)
    {
        cout<<i<<" "<<distance[i]<<endl;
    }

    /*
    //code for printing path: map is used for this.
    //make sure to make source same as the one used initially to initiate dijkstra
    //because remember dijkstra's funtionality: it finds shortest path from a chosen 
    //vertex to all other vertices (and not all pair shortest path :)) 
    // this means map does not know path from a point x to point y if x
    // is not same as the source vertex with which dijkstra was started.
    
    int source = 1;
    int destination = 6;
    int k = 100;
    while(source != destination && k--)
    {
        cout<<destination<<" <- ";
        destination = path[destination];
    }
    cout<<source;
    cout<<endl;
    
    for testcase:
    9 14
    0 1 4
    0 7 8
    1 2 8
    1 7 11
    2 3 7
    2 8 2
    2 5 4
    3 4 9
    3 5 14
    4 5 10
    5 6 2
    6 7 1
    6 8 6
    7 8 7
    
    link1: https://www.geeksforgeeks.org/dijkstras-shortest-path-algorithm-using-priority_queue-stl/
    
    for optimised version
    link2: https://www.topcoder.com/thrive/articles/Power%20up%20C++%20with%20the%20Standard%20Template%20Library%20Part%20Two:%20Advanced%20Uses#Dijkstrapriorityqueue
    
    */
}


signed main() {

    SIGMA
    #ifndef ONLINE_JUDGE
    freopen("inp.txt", "r", stdin);
    freopen("newop.txt", "w", stdout);
    #endif

    int t = 1;

    //cin>>t;

    for(int tc = 1; tc <=t; tc++)
    {
        solve();
    }
    return 0;

    //ascii value of ('0'-'9') is(48 - 57) and (a-z) is (97-122) and (A-Z) is(65-90) and 32 for space
}